Application Layer and Microservices

	Separating the web layer from the application layer (also known as the platform layer) allows you to scale and configure both layers independently. Adding a new API result in adding application servers without necessarily adding additional web servers. The single responsibility principle advocates for small and autonomous services that work together. Small teams with small services can plan more aggressively for rapid growth.

	Microservices are defined as a suite of independently deployable, small, modular services. Each service runs a unique process and communicates through a well-defined, lightweight mechanism to serve a business goal. Each microservice ideally has a single responsibility.

	Service Discovery

		With many microservices communicating with each other it becomes challenging to configure the correct endpoints, it gets more challenging when these endpoints often change. We use 'Service discovery' to solve this problem. There are two main service discovery patterns: client‑side discovery and server‑side discovery.

		The Registry Service

			The service registry is a key part of service discovery. It is a database containing the network locations of service instances. A service registry needs to be highly available and up to date. Clients can cache network locations obtained from the service registry.

		Client-Side Discovery Pattern

			When using client‑side discovery, the client is responsible for determining the network locations of available service instances and load balancing requests across them. The client queries a service registry, which is a database of available service instances. The client then uses a load‑balancing algorithm to select one of the available service instances and makes a request.

			This pattern couples the client with the service registry.

		Server-Side Discovery Pattern

			The client makes a request to a service via a load balancer. The load balancer queries the service registry and routes each request to an available service instance. As with client‑side discovery, service instances are registered and deregistered with the service registry.

			The AWS Elastic Load Balancer (ELB) is an example of a server-side discovery router.

	Disadvantages of microservices

		1. With its multiple independent components communicating with each other, microservice architecture is more complex than monolithic architecture.
		2. Requires more documentation work.
		3. Deployment becomes complex.
		4. Adds more failure points.


References

	http://lethain.com/introduction-to-architecting-systems-for-scale
	http://www.puncsky.com/blog/2016-02-13-crack-the-system-design-interview
	https://en.wikipedia.org/wiki/Service-oriented_architecture
	http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper
	https://cloudncode.wordpress.com/2016/07/22/msa-getting-started/
	https://www.nginx.com/blog/service-discovery-in-a-microservices-architecture
