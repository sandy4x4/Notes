Abstraction: Processes (Homework)

	This is simulation homework. The simulation is done using the program 'process-run.py'(check references for link). This program allows you to see how process states change as programs run and either use the CPU or do I/O.

Questions

	1. Run process-run.py with the following flags: -l 5:100,5:100. What should the CPU utilization be (e.g., the percent of the time the CPU is in use?) Why do you know this? Use the -c and -p flags to see if you were right.

		Answer: The CPU utilization is 100% since there are no i/o instructions.

	2. Now run with these flags: ./process-run.py -l 4:100,1:0. These flags specify one process with 4 instructions (all to use the CPU), and one that simply issues an I/O and waits for it to be done. How long does it take to complete both processes? Use -c and -p to find out if you were right.

		Answer:

				Process0 has 4 CPU operations; Process1 has a single i/o operation.

							Time    PID: 0    PID: 1       CPU       IOs
				  			1       RUN:cpu   READY         1
				  			2       RUN:cpu   READY         1
				  			3       RUN:cpu   READY         1
				  			4       RUN:cpu   READY         1
						  	5       DONE      RUN:io        1
						  	6       DONE      WAITING                 1
						  	7       DONE      WAITING                 1
						  	8       DONE      WAITING                 1
						  	9       DONE      WAITING                 1
						 	10      DONE      WAITING                 1
						 	11*     DONE      RUN:io_done   1

				Stats: Total Time 11
				Stats: CPU Busy 6 (54.55%)
				Stats: IO Busy  5 (45.45%)

	3. Switch the order of the processes: -l 1:0,4:100. What happens now? Does switching the order matter? Why? 

		Answer:
			Switching the order leads to better CPU utilization. Now, process1 runs while process0 waits for i/o completion.

						Time    PID: 0    		PID: 1          CPU       IOs
			  			 1      RUN:io         	READY            1
		  				 2      WAITING       	RUN:cpu          1         1
			 			 3      WAITING       	RUN:cpu          1         1
			  			 4      WAITING       	RUN:cpu          1         1
			  			 5      WAITING       	RUN:cpu          1         1
			     		 6      WAITING         DONE             1         1
			  			 7*     RUN:io_done     DONE             1

			Stats: Total Time 7
			Stats: CPU Busy 7 (100.00%)
			Stats: IO Busy  5 (71.43%)

	4.  Weâ€™ll now explore some of the other flags. One important flag is -S, which determines how the system reacts when a process issues an I/O. With the flag set to SWITCH_ON_END, the system will NOT switch to another process while one is doing I/O, instead of waiting until the process is finished. What happens when you run the following two processes (-l 1:0,4:100 -c -S SWITCH_ON_END), one doing I/O and the other doing CPU work?

		Answer:

			With 'SWITCH_ON_END', process1 will not be run when process0 is waiting. This leads to CPU wastage. The result will be the same as that of question 2.

					Time    	PID: 0    		PID: 1       CPU       IOs
			  		 1         	RUN:io         	READY         1
			  		 2        	WAITING         READY                   1
			  		 3        	WAITING         READY                   1
			  		 4        	WAITING         READY                   1
			  		 5        	WAITING         READY                   1
			  		 6        	WAITING         READY                   1
			  		 7*   		RUN:io_done     READY         1
			  		 8          DONE       		RUN:cpu       1
			  		 9          DONE       		RUN:cpu       1
			 		 10         DONE       		RUN:cpu       1
			 		 11         DONE       		RUN:cpu       1

			Stats: Total Time 11
			Stats: CPU Busy 6 (54.55%)
			Stats: IO Busy  5 (45.45%)

	5. Now, run the same processes, but with the switching behavior set to switch to another process whenever one is WAITING for I/O (-l 1:0,4:100 -c -S SWITCH_ON_IO). What happens now?

		Answer:

			With 'SWITCH_ON_IO' back in place, we achieve efficient CPU utilization same as in question 3.

					Time    PID: 0    		PID: 1       CPU       IOs
			  		 1      RUN:io         	READY         1
			  		 2      WAITING       	RUN:cpu       1         1
			  		 3      WAITING       	RUN:cpu       1         1
			  		 4      WAITING       	RUN:cpu       1         1
			  		 5      WAITING       	RUN:cpu       1         1
			  		 6      WAITING         DONE          1         1
			  		 7* 	RUN:io_done     DONE          1

			Stats: Total Time 7
			Stats: CPU Busy 7 (100.00%)
			Stats: IO Busy  5 (71.43%)

	6. One other important behavior is what to do when an I/O completes. With -I IO RUN LATER, when an I/O completes, the process that issued it is not necessarily run right away; rather, whatever was running at the time keeps running. What happens when you run this combination of processes? (Run ./process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -I IO_RUN_LATER -c -p) Are system resources being effectively utilized?

		Answer:

			We observe that the CPU isn't effectively utilized in this combination. CPU is wasted during the last two i/o operations.

					Time    PID: 0    		PID: 1    	PID: 2    	PID: 3       CPU       IOs
					  1     RUN:io        	READY       READY       READY         1
					  2     WAITING       	RUN:cpu     READY       READY         1         1
					  3     WAITING       	RUN:cpu     READY       READY         1         1
					  4     WAITING       	RUN:cpu     READY       READY         1         1
					  5     WAITING       	RUN:cpu     READY       READY         1         1
					  6     WAITING       	RUN:cpu     READY       READY         1         1
					  7*    READY          	DONE        RUN:cpu     READY         1
					  8     READY          	DONE        RUN:cpu     READY         1
					  9     READY           DONE        RUN:cpu     READY         1
					 10     READY           DONE        RUN:cpu     READY         1
					 11     READY           DONE        RUN:cpu     READY         1
					 12     READY           DONE        DONE        RUN:cpu       1
					 13     READY           DONE        DONE        RUN:cpu       1
					 14     READY           DONE        DONE        RUN:cpu       1
					 15     READY           DONE        DONE        RUN:cpu       1
					 16     READY           DONE        DONE        RUN:cpu       1
					 17     RUN:io_done     DONE        DONE        DONE          1
					 18     RUN:io          DONE        DONE        DONE          1
					 19     WAITING         DONE        DONE        DONE                    1
					 20     WAITING         DONE        DONE        DONE                    1
					 21     WAITING         DONE        DONE        DONE                    1
					 22     WAITING         DONE        DONE        DONE                    1
					 23     WAITING         DONE        DONE        DONE                    1
					 24*    RUN:io_done     DONE        DONE        DONE          1
					 25     RUN:io          DONE        DONE        DONE          1
					 26     WAITING         DONE        DONE        DONE                    1
					 27     WAITING         DONE        DONE        DONE                    1
					 28     WAITING         DONE        DONE        DONE                    1
					 29     WAITING         DONE        DONE        DONE                    1
					 30     WAITING         DONE        DONE        DONE                    1
					 31*    RUN:io_done     DONE        DONE        DONE          1

			Stats: Total Time 31
			Stats: CPU Busy 21 (67.74%)
			Stats: IO Busy  15 (48.39%)

	7. Now run the same processes, but with -I IO_RUN_IMMEDIATE set, which immediately runs the process that issued the I/O. How does this behavior differ? Why might running a process that just completed an I/O again be a good idea?

		Answer:

			We see that 'IO_RUN_IMMEDIATE' gives better CPU utilization than 'IO_RUN_LATER'. Running a process that just completed an i/o again is a good idea since it is likely that the following instructions can be i/o.

					Time    	PID: 0    		PID: 1    	PID: 2    	PID: 3       CPU       IOs
	  				 1         	RUN:io         	READY       READY       READY         1
			  		 2        	WAITING       	RUN:cpu     READY       READY         1         1
					 3        	WAITING       	RUN:cpu     READY       READY         1         1
					 4        	WAITING       	RUN:cpu     READY       READY         1         1
			  		 5        	WAITING       	RUN:cpu     READY       READY         1         1
					 6        	WAITING       	RUN:cpu     READY       READY         1         1
				  	 7*   		RUN:io_done     DONE        READY       READY         1
					 8         	RUN:io          DONE        READY       READY         1
					 9        	WAITING         DONE        RUN:cpu     READY         1         1
					 10        	WAITING         DONE        RUN:cpu     READY         1         1
					 11        	WAITING         DONE        RUN:cpu     READY         1         1
					 12        	WAITING         DONE        RUN:cpu     READY         1         1
					 13        	WAITING         DONE        RUN:cpu     READY         1         1
					 14*   		RUN:io_done     DONE        DONE        READY         1
					 15         RUN:io          DONE        DONE        READY         1
					 16        	WAITING         DONE        DONE        RUN:cpu       1         1
					 17        	WAITING         DONE        DONE        RUN:cpu       1         1
					 18        	WAITING         DONE        DONE        RUN:cpu       1         1
					 19        	WAITING         DONE        DONE        RUN:cpu       1         1
					 20        	WAITING         DONE        DONE        RUN:cpu       1         1
					 21*   		RUN:io_done     DONE        DONE        DONE          1

			Stats: Total Time 21
			Stats: CPU Busy 21 (100.00%)
			Stats: IO Busy  15 (71.43%)

	8. Now run with some randomly generated processes: -s 1 -l 3:50,3:50 or -s 2 -l 3:50,3:50 or -s 3 -l 3:50,3:50. See if you can predict how the trace will turn out. What happens when you use the flag -I IO_RUN_IMMEDIATE vs. -I IO_RUN_LATER? What happens when you use -S SWITCH_ON_IO vs. -S SWITCH_ON_END?

		Answer:

			In most scenarios, 'SWITCH_ON_IO' and 'IO_RUN_IMMEDIATE' gives better CPU utilization compared to 'SWICH_ON_END' and 'IO_RUN_LATER'. But there are exceptions. Consider the following processes with 'IO_RUN_IMMEDIATE'

				process0                         process1

				i/o (wait = 3)                   cpu
				cpu                              cpu
				cpu                              cpu
				cpu                              i/o (wait = 3)
				cpu                              
				cpu                              
				cpu                              
				cpu                              


				Time    	PID: 0    		PID: 1    	CPU       IOs
				 1          Run:io          READY        1         
				 2          WAITING         Run:cpu      1         1
				 3          WAITING         Run:cpu      1         1
				 4          WAITING         Run:cpu      1		   1
				 5*         Run:io_done   	READY        1          
				 6          Run:cpu         READY        1       
				 7          Run:cpu         READY 		 1
				 8 			Run:cpu 		READY		 1
				 9			Run:cpu         READY 		 1
				 10			Run:cpu 		READY 		 1
				 11			Run:cpu 		READY 		 1
				 12 		Run:cpu 		READY 		 1
				 13			DONE 			Run:io 		 1
				 14 		DONE 			WAITING 			   1
				 15 		DONE 			WAITING 			   1
				 16 		DONE 			WAITING 			   1
				 17* 		DONE 			Run:io_done  1


			Stats: Total Time 17
			Stats: CPU Busy 14 (82.35%)
			Stats: IO Busy  6 (35.29%)

			Let's switch to 'IO_RUN_LATER'.

				Time    	PID: 0    		PID: 1    	CPU       IOs
				 1          Run:io          READY        1         
				 2          WAITING         Run:cpu      1         1
				 3          WAITING         Run:cpu      1         1
				 4          WAITING         Run:cpu      1		   1
				 5*         READY        	Run:io	 	 1          
				 6          Run:cpu         WAITING      1  	   1     
				 7          Run:cpu         WAITING      1		   1
				 8 			Run:cpu 		WAITING		 1		   1
				 9			Run:cpu         READY 		 1
				 10			Run:cpu 		READY 		 1
				 11			Run:cpu 		READY 		 1
				 12 		Run:cpu 		READY 		 1
				 13*		DONE 			Run:io_done  1

			Stats: Total Time 13
			Stats: CPU BUSY 13 (100%)
			Stats: IO Busy 6 (46.15%)

			We see that 'IO_RUN_LATER' has a better performance than 'IO_RUN_IMMEDIATE'.

References:

	https://github.com/remzi-arpacidusseau/ostep-homework/blob/master/cpu-intro/process-run.py