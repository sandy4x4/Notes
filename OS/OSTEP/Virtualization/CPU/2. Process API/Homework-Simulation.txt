Homework-Simulation

	This is simulation homework. The simulation is done using the program 'fork.py'(check references for link). The simulator fork.py is a simple tool to show what a process tree looks like when processes are created and destroyed.

	Questions

		1. Run ./fork.py -s 10 and see which actions are taken. Can you predict what the process tree looks like at each step? Use the -c flag to check your answers. Try some different random seeds (-s) or add more actions (-a) to get the hang of it.

			Answer: 

                   								Process Tree:
               									   a

					Action: a forks b
					                               a
					                               └── b
					Action: a forks c
					                               a
					                               ├── b
					                               └── c
					Action: c EXITS
					                               a
					                               └── b
					Action: a forks d
					                               a
					                               ├── b
					                               └── d
					Action: a forks e
					                               a
					                               ├── b
					                               ├── d
					                               └── e


		2. One control the simulator gives you is the fork percentage, controlled by the -f flag. The higher it is, the more likely the next action is a fork; the lower it is, the more likely the action is an exit. Run the simulator with a large number of actions (e.g., -a 100) and vary the fork percentage from 0.1 to 0.9. What do you think the resulting final process trees will look like as the percentage changes?

			Answer: 

			We observe that with a low 'f' value (say, 0.1), the process tree is very small with 'a' having one or two children. As 'f' increases, the number of children 'a' has also increased.


		3. Now, switch the output by using the -t flag (e.g., run ./fork.py -t). Given a set of process trees, can you tell which actions were taken?

			Answer:

				Consider the following tree:

								 a

				Action?
				                               a
				                               └── b
				Action?
				                               a
				                               ├── b
				                               └── c
				Action?
				                               a
				                               ├── b
				                               │   └── d
				                               └── c
				Action?
				                               a
				                               ├── c
				                               └── d
				Action?
				                               a
				                               ├── c
				                               │   └── e
				                               └── d

				Action 1 => a forks b
				Action 2 => a forks c
				Action 3 => b forks d
				Action 4 => b exits
				Action 5 => c forks e

		4. One interesting thing to note is what happens when a child exits; what happens to its children in the process tree? To study this, let’s create a specific example: ./fork.py -A a+b,b+c,c+d,c+e,c-. This example has the process ’a’ create ’b’, which in turn creates ’c’, which then creates ’d’ and ’e’. 
		However, then, ’c’ exits. What do you think the process tree should like after the exit? What if you use the -R flag? Learn more about what happens to orphaned processes on your own to add more context.

			Answer: 

			We observe that 'd' and 'e' become a's children. All the orphaned processes are adopted by the root process. Upon using the -R flag, orphaned children are adopted by their closest ancestor.

		5. One last flag to explore is the -F flag, which skips intermediate steps and only asks to fill in the final process tree. Run ./fork.py -F and see if you can write down the final tree by looking at the series of actions generated. Use different random seeds to try this a few times.

			Answer: This is trivial... XD

		6. Finally, use both -t and -F together. This shows the final process tree but then asks you to fill in the actions that took place. By looking at the tree, can you determine the exact actions that took place? In which cases can you tell? In which can’t you tell? Try some different random seeds to delve into this question.

			Answer: 

				By looking at the final tree, it's very easy to guess the actions but the order isn't. Consider the following tree:


						a
						|--b
						|--c

					The actions involved are 'a forks b', 'a forks c'. But it can be in any order.




